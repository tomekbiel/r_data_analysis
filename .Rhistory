install.packages("renv")
renv::init()
renv::status()
data <- read_csv("../../data/ResearchInformation3.csv")
library(readr)
data <- read.csv("../../data/ResearchInformation3.csv")
getwd()
data <- read.csv("../data/ResearchInformation3.csv")
data <- read.csv("../data/ResearchInformation3.csv")
data <- read.csv("../../data/ResearchInformation3.csv")
#data <- read.csv("../../data/ResearchInformation3.csv")
data <- read.csv("data/ResearchInformation3.csv", stringsAsFactors = FALSE)
data <- read.csv("data/ResearchInformation3.csv", stringsAsFactors = FALSE)
data <- read.csv("data/ResearchInformation3.csv", stringsAsFactors = FALSE)
data
data <-data$Preparation
data
data <- read.csv("data/ResearchInformation3.csv", stringsAsFactors = FALSE)
View(data)
View(data)
View(data)
print(head(data))
system("git --version")
colnames(data)
summary(data)
class(data$Overall)
url <- "https://raw.githubusercontent.com/tomekbiel/r_data_analysis/refs/heads/master/data/ResearchInformation3.csv"
data <- read.csv(url)
View(data)
View(data)
View(data)
print(data[,16])
print(data[,15:16])
data[,15:16]<-as.factor(data[,15:16])
class(data$Overall)
mean <- round(sapply(split(data$Overall, data$Preparation),mean),3)
print(mean)
mean <- round(sapply(split(data$Overall, data$Preparation),mean),3)
var <- round(sqrt(sapply(data$Overall, data$Preparation),mean),3)
print(var)
mean <- round(sapply(split(data$Overall, data$Preparation),mean),3)
var <- round(sqrt(sapply(split(data$Overall, data$Preparation)),var),3)
mean <- round(sapply(split(data$Overall, data$Preparation),mean),3)
var <- round(sqrt(sapply(split(data$Overall, data$Preparation),var),3)
(head(data[, c(8, 16)], 5))
var <- round(sqrt(sapply(split(data$Overall, data$Preparation),var)),3)
mean <- round(sapply(split(data$Overall, data$Preparation),mean),3)
var <- round(sqrt(sapply(split(data$Overall, data$Preparation),var)),3)
(head(data[, c(8, 16)], 5))
(head(data[, c(8, 16)], 10))
(head(data[, c(8, 16)], 10))
(mean <- round(sapply(split(data$Overall, data$Preparation),mean),3))
(var <- round(sqrt(sapply(split(data$Overall, data$Preparation),var)),3))
library(tidyverse)
install.packages('tidyverse', dependencies=TRUE, type="source")
library(tidyverse)
library(tidyverse)
library(tidyr )
install.packages('tidyverse', dependencies=TRUE, type="source")
renv::deactivate()
renv::deactivate()
renv::deinit()
library(tidyverse)
boxplot(split(data$Overall,data$Preparation),
xlab='Preparation',ylab='Overall',col='green')
attach(data)
#model construct
m1 <- lm(Overall~Preparation)
(anova(m1))
detach(Overall)
m1 <- lm(data$Overall~data$Preparation)
(anova(m1))
detach(data$Overall)
#model construct
m1 <- lm(data$Overall~data$Preparation)
(anova(m1))
#detach(data$Overall)
attach(data)
#model construct
m1 <- lm(data$Overall~data$Preparation)
(anova(m1))
detach(data)
View(m1)
View(m1)
View(data)
View(data)
anova(m1)
post_m1 <- aov(data$Overall~data$Preparation)
overall_hsd <- TurkeyHSD(post_m1, which='data$Preparation')
anova(m1)
post_m1 <- aov(data$Overall~data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which='data$Preparation')
(overall_hsd)
anova(m1)
post_m1 <- aov(data$Overall~data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which='Preparation')
(overall_hsd)
anova(m1)
post_m1 <- aov(data$Overall~data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which='data$Preparation')
(overall_hsd)
anova(m1)
post_m1 <- aov(data$Overall~data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which='data$Preparation')
(overall_hsd)
plot.TukeyHSD(overall_hsd)
plot(overall_hsd)
(means <- round(matrix(sapply(split(data$Overall, data$Attendance:data$Preparation),mean),ncol=4),3))
(means <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),mean),ncol=4),3))
data$Attendance <- as.factor(data$Attendance)
data$Preparation <- as.factor(data$Preparation)
attach(data)
(means <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),mean),ncol=4),3))
View(data)
View(data)
is.nan(data$Overall)
any(is.nan(data$Overall))  # FALSE
any(is.na(data$Overall))
any(is.nan(data$Attendance))  # FALSE
any(is.na(data$Attendance))
any(is.nan(data$Preparation))  # FALSE
any(is.na(data$Preparation))
table(data$Attendance, data$Preparation)
data$Attendance <- as.factor(data$Attendance)
data$Preparation <- as.factor(data$Preparation)
attach(data)
('means')
(means <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),mean),ncol=4),3))
(vars <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),var),ncol=4),3))
( table(data$Attendance, data$Preparation))
data$Attendance <- as.factor(data$Attendance)
data$Preparation <- as.factor(data$Preparation)
attach(data)
('means')
(means <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),mean),ncol=4),3))
('variances')
(vars <- round(matrix(sapply(split(data$Overall, interaction(data$Attendance, data$Preparation)),var),ncol=4),3))
( table(data$Attendance, data$Preparation))
boxplot(split(data$Overall, interaction(data$Attendance, data$Preparation)), xlab='Preparation', ylab='Overall', col='red')
boxplot(split(data$Overall, interaction(data$Preparation, data$Attendance )), xlab='Preparation', ylab='Overall', col='red')
boxplot(split(data$Overall, interaction(data$Attendance, data$Preparation)), xlab='Preparation', ylab='Overall', col='red')
attach(data)
par(mfrow=c(2,1))
par(mar=c(4.2,4,0.8,1.1))
interaction.plot(data$Attendance, data$Preparation, data$Overall, ylim = c(3,7),lty=c(1,5,10),
ylab = 'overall',xlab = 'Attendance',lwd=2,trace.label = 'Preparation')
interaction.plot( data$Preparation,data$Attendance, data$Overall, ylim = c(3,7),lty=c(1,10),
ylab = 'overall',xlab = 'Preparation',lwd=2,trace.label = 'Attendance')
detach(data)
par(mfrow=c(2,1))
#par(mar=c(4.2,4,0.8,1.1))
interaction.plot(data$Attendance, data$Preparation, data$Overall, ylim = c(3,7),lty=c(1,5,10),
ylab = 'overall',xlab = 'Attendance',lwd=2,trace.label = 'Preparation')
interaction.plot( data$Preparation,data$Attendance, data$Overall, ylim = c(3,7),lty=c(1,10),
ylab = 'overall',xlab = 'Preparation',lwd=2,trace.label = 'Attendance')
detach(data)
interaction.plot(data$Attendance, data$Preparation, data$Overall, ylim = c(3,7),lty=c(1,5,10),
ylab = 'overall',xlab = 'Attendance',lwd=2,trace.label = 'Preparation')
interaction.plot( data$Preparation,data$Attendance, data$Overall, ylim = c(3,7),lty=c(1,10),
ylab = 'overall',xlab = 'Preparation',lwd=2,trace.label = 'Attendance')
detach(data)
attach(data)
m1 <- lm(data$Overall~data$Preparation+data$Attendance)
m2 <- anova(m1)
(m2)
detach(data)
''
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukayHSD(post_m1, which=c("data$Attendance","data$Preparation"))
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which=c("data$Attendance","data$Preparation"))
(overall_hsd)
par(mfrow=c(2,1))
#par(mar=c(4,3,3,1.5))
plot(overall_hsd)
detach(data)
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which=c("data$Attendance","data$Preparation"))
(overall_hsd)
par(mfrow=c(2,1))
par(mar=c(4,3,3,1.5))
plot(overall_hsd)
detach(data)
'''
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which=c("data$Attendance","data$Preparation"))
(overall_hsd)
par(mfrow=c(2,1))
#par(mar=c(4,3,3,1.5))
plot(overall_hsd)
detach(data)
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which=c("data$Attendance","data$Preparation"))
(overall_hsd)
par(mfrow=c(2,1))
#par(mar=c(4,3,3,1.5))
plot(overall_hsd)
detach(data)
)
}
)))
attach(data)
post_m1 <- aov(data$Overall~data$Attendance+data$Preparation)
overall_hsd <- TukeyHSD(post_m1, which=c("data$Attendance","data$Preparation"))
(overall_hsd)
par(mfrow=c(2,1))
#par(mar=c(4,3,3,1.5))
plot(overall_hsd)
detach(data)
m_int <- aov(Overall ~ Attendance * Preparation, data=data)
summary(m_int)
post_int <- aov(Overall ~ Attendance * Preparation, data = data)
tukey_int <- TukeyHSD(post_int)
plot(tukey_int)
post_int
colnames(data)
str(data)
str(data)
# Konwersja na faktory:
data$Department <- as.factor(data$Department)
data$Gender <- as.factor(data$Gender)
data$Income <- as.factor(data$Income)
data$Hometown <- as.factor(data$Hometown)
data$Gaming <- as.factor(data$Gaming)
data$Job <- as.factor(data$Job)
data$Extra <- as.factor(data$Extra)
data$Semester <- as.factor(data$Semester)  # ewentualnie ordered factor, jeśli ma sens
# Model regresji liniowej:
model <- lm(Overall ~ Preparation + Attendance + Gaming + Income + English + Extra + Semester + Last + Job + Gender + Department + HSC + SSC + Computer, data = data)
summary(model)
str(data)
# Konwersja na faktory:
data$Department <- as.factor(data$Department)
data$Gender <- as.factor(data$Gender)
data$Income <- as.factor(data$Income)
data$Hometown <- as.factor(data$Hometown)
data$Gaming <- as.factor(data$Gaming)
data$Job <- as.factor(data$Job)
data$Extra <- as.factor(data$Extra)
data$Semester <- as.factor(data$Semester)  # ewentualnie ordered factor, jeśli ma sens
# Model regresji liniowej:
model <- lm(Overall ~ Preparation + Attendance + Gaming + Income + English + Extra + Semester + Last + Job + Gender + Department + HSC + SSC + Computer, data = data)
summary(model)
plot(model)
plot(model)
colnames(data)
summary(data)
dim(data)
fix(data)
str(data)
View(data)
View(data)
# Wybieramy tylko zmienne typu numerycznego
numeric_vars <- data[, sapply(data, is.numeric)]
# Sprawdźmy jakie kolumny zostały wybrane
names(numeric_vars)
# Macierz korelacji z zaokrągleniem
cor_matrix <- cor(numeric_vars, use = "complete.obs")
round(cor_matrix, 2)
install.packages("corrplot")  # tylko raz
library(corrplot)
corrplot(cor_matrix, method = "color", type = "upper", tl.col = "black", addCoef.col = "black")
# Najpierw dummy encoding faktorów
data_encoded <- model.matrix(Overall ~ ., data = data)[, -1]  # bez interceptu
model <- lm(Overall ~ ., data = as.data.frame(data_encoded))
library(car)
install.packages("car")  # tylko raz
X <- model.matrix(Overall ~ ., data = data)[, -1]  # predictors
# Połącz z y (zmienna zależna)
df_vif <- data.frame(Overall = data$Overall, X)
# Regresja
model <- lm(Overall ~ ., data = df_vif)
vif(model)
library(car)
X <- model.matrix(Overall ~ ., data = data)[, -1]  # predictors
# Połącz z y (zmienna zależna)
df_vif <- data.frame(Overall = data$Overall, X)
# Regresja
model <- lm(Overall ~ ., data = df_vif)
vif(model)
# Usunięcie kolumn 'Last' i 'Department'
data_clean <- data[, !(names(data) %in% c("Last", "Department"))]
# Jeśli używasz wcześniej zakodowanych danych (dummy variables), np. data_encoded:
# data_encoded_clean <- data_encoded[, !(names(data_encoded) %in% c("Last", grep("^Department", names(data_encoded), value = TRUE)))]
# Regresja liniowa na oczyszczonych danych
model_clean <- lm(Overall ~ ., data = data_clean)
# Podsumowanie modelu
summary(model_clean)
